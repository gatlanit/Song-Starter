name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger the workflow on tags that start with 'v'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]  # Runs on both Linux (Ubuntu) and MacOS
        arch: [x86_64, arm64]  # Builds for both x86_64 and arm64 architectures
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up build environment (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y build-essential

      - name: Set up cross-compiler for ARM64 (Linux)
        if: matrix.arch == 'arm64' && runner.os == 'Linux'
        run: sudo apt install -y gcc-aarch64-linux-gnu

      - name: Build binary for Linux (x86_64)
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x86_64'
        run: |
          export CC=gcc
          gcc src/main.c -o song-starter-linux-x86_64

      - name: Build binary for Linux (arm64)
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
        run: |
          export CC=aarch64-linux-gnu-gcc
          gcc src/main.c -o song-starter-linux-arm64

      - name: Build binary for MacOS (x86_64)
        if: matrix.os == 'macos-latest' && matrix.arch == 'x86_64'
        run: |
          clang -arch x86_64 -o song-starter-osx-x86_64 src/main.c

      - name: Build binary for MacOS (arm64)
        if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
        run: |
          clang -arch arm64 -o song-starter-osx-arm64 src/main.c

      - name: Upload binary as artifact
        uses: actions/upload-artifact@v3
        with:
          name: song-starter-${{ runner.os }}-${{ matrix.arch }}
          path: song-starter-${{ runner.os }}-${{ matrix.arch }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./artifacts/song-starter-*
          asset_name: song-starter-${{ runner.os }}-${{ matrix.arch }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
