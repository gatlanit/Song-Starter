name: Release

on:
  push:
    tags:
      - 'v*' # Trigger workflow on tags matching the pattern v*

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        arch: [x86_64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List files in the working directory
        run: ls -R

      - name: Set up build environment
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y build-essential

      - name: Set up cross-compiler for ARM64
        if: matrix.arch == 'arm64' && runner.os == 'Linux'
        run: sudo apt install -y gcc-aarch64-linux-gnu

      - name: Build binary
        run: |
          echo "Compiling src/main.c with $CC"
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            export OS_NAME="linux"
            export CC=gcc
            if [[ "${{ matrix.arch }}" == "arm64" ]]; then
              export CC=aarch64-linux-gnu-gcc
            fi
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            export OS_NAME="osx"
            export CC=clang
            if [[ "${{ matrix.arch }}" == "arm64" ]]; then
              export CFLAGS="-target arm64-apple-macos11"
            fi
          fi
          $CC $CFLAGS src/main.c -o song-starter-${OS_NAME}-${{ matrix.arch }}

      - name: Upload binary to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: song-starter-${{ matrix.os == 'ubuntu-latest' && 'linux' || 'osx' }}-${{ matrix.arch }}
          path: song-starter-${{ matrix.os == 'ubuntu-latest' && 'linux' || 'osx' }}-${{ matrix.arch }}

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/song-starter-*
          asset_name: song-starter-${{ matrix.os == 'ubuntu-latest' && 'linux' || 'osx' }}-${{ matrix.arch }}
          asset_content_type: application/octet-stream
