name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger workflow on version tags (e.g., v1.0.0)

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-latest]  # Updated Ubuntu version
        arch: [x86_64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Updated checkout action

      - name: List files in the working directory
        run: ls -R

      - name: Set up build environment (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y build-essential

      - name: Set up cross-compiler for ARM64 (Linux)
        if: matrix.arch == 'arm64' && runner.os == 'Linux'
        run: sudo apt install -y gcc-aarch64-linux-gnu

      - name: Build binary
        run: |
          echo "Compiling src/main.c with $CC"
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            export OS_NAME="linux"
            export CC=gcc
            if [[ "${{ matrix.arch }}" == "arm64" ]]; then
              export CC=aarch64-linux-gnu-gcc
            fi
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            export OS_NAME="osx"
            export CC=clang
            if [[ "${{ matrix.arch }}" == "arm64" ]]; then
              export CFLAGS="-target arm64-apple-macos11"
            elif [[ "${{ matrix.arch }}" == "x86_64" ]]; then
              export CFLAGS="-arch x86_64"
            fi
          fi
          $CC $CFLAGS src/main.c -o song-starter-${OS_NAME}-${{ matrix.arch }}

      - name: List files after build
        run: ls -R .

      - name: Upload binary to artifacts
        uses: actions/upload-artifact@v4  # Updated upload action
        with:
          name: song-starter-${{ matrix.os == 'ubuntu-22.04' && 'linux' || 'osx' }}-${{ matrix.arch }}
          path: song-starter-${{ matrix.os == 'ubuntu-22.04' && 'linux' || 'osx' }}-${{ matrix.arch }}

  release:
    needs: build
    runs-on: ubuntu-22.04  # Updated Ubuntu version
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4  # Updated download action
        with:
          path: ./artifacts

      - name: List downloaded artifacts
        run: ls -R ./artifacts

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload release assets
        run: |
          for file in $(find ./artifacts -type f); do
            asset_name=$(basename "$file")
            echo "Uploading $asset_name..."
            curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}?name=$asset_name"
          done
